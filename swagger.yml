swagger: "2.0"
info:
  description: "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger zx knowledge share"
  termsOfService: "http://swagger.io/terms/"
basePath: "/"
tags:
  - name: "user"
    description: "Operations about user and article"
  - name: 'admin'
    description: 'admin operation about user and post article'
schemes:
  - "http"
paths:
  /api/admin/users:
    get:
      tags:
        - admin
      summary: 'get user list'
      description: 'admin get all users'
      responses:
        200:
          description: 获得用户列表成功的返回值
          schema:
            type: object
            properties:
              content:
                type: object
                properties:
                  message:
                    type: string
                    example: rename workspace success

  /api/admin/users/{userId}:
    get:
      tags:
        - admin
      summary: "user info"
      description: "get user by id"
      parameters:
        - name: userId
          description: userId
          in: path
          type: number
          required: true
      responses:
        200:
          description: 获得用户列表成功的返回值
          schema:
            type: object
            properties:
              content:
                type: object
                properties:
                  message:
                    type: string
                    example: success
    delete:
      tags:
        - admin
      summary: "delete user"
      description: "delete user by id"
      parameters:
        - name: userId
          description: userId
          in: path
          type: number
          required: true
      responses:
        200:
          description: 获得用户列表成功的返回值
          schema:
            type: object
            properties:
              content:
                type: object
                properties:
                  message:
                    type: string
                    example: success

  /api/admin/users/status:
    put:
      tags:
        - admin
      summary: "change user status"
      description: "status post article change"
      parameters:
        - name: userId
          description: userId
          in: query
          type: number
          required: true
      responses:
        200:
          description: 获得用户列表成功的返回值
          schema:
            type: object
            properties:
              content:
                type: object
                properties:
                  message:
                    type: string
                    example: success
  #   @PutMapping("user/{userId}")
  #   public Response modifyUserInfo(@PathVariable("userId") Integer id){
  #   User user = userService.getUserById(id);
  #   log.info("user id:{} user name:{}",id,user.getUsername());
  #   return Response.fail();
  # }
  #   return Response.ok("change success");

  /api/admin/posts:
    get:
      tags:
        - admin
      summary: "post Article info"
      description: "get post Article info"
      parameters:
        - name: userId
          description: userId
          in: query
          type: number
          required: true
      responses:
        200:
          description: 获得用户列表成功的返回值
          schema:
            type: object
            properties:
              content:
                type: object
                properties:
                  message:
                    type: string
                    example: success

  /api/admin/posts/{articleId}:
    get:
      tags:
        - admin
      summary: "get Article Info"
      description: get
      parameters:
        - name: articleId
          description: userId
          in: path
          type: number
          required: true
      responses:
        200:
          description: 获得用户列表成功的返回值
          schema:
            type: object
            properties:
              content:
                type: object
                properties:
                  message:
                    type: string
                    example: success
    delete:
      tags:
        - admin
      summary: "delete article info"
      description: "delete posted Article"
      parameters:
        - name: articleId
          description: userId
          in: path
          type: number
          required: true
      responses:
        200:
          description: 获得用户列表成功的返回值
          schema:
            type: object
            properties:
              content:
                type: object
                properties:
                  message:
                    type: string
                    example: success
  /api/admin/posts/public:
    put:
      tags:
        - admin
      summary: "change public posted artic;e"
      description: "change public posted become un"
      parameters:
        - name: userId
          description: userId
          in: query
          type: number
          required: true
      responses:
        200:
          description: 获得用户列表成功的返回值
          schema:
            type: object
            properties:
              content:
                type: object
                properties:
                  message:
                    type: string
                    example: success
  /user/{userId}/article:
    post:
      tags:
        - user
      summary: "user post article"
      description: "post a public article"
      parameters:
        - name: userId
          in: path
          description: "user id"
          required: true
          type: number
        - in: "body"
          name: "body"
          description: "order placed for purchasing the pet"
          required: true
          schema:
            properties:
              originContent:
                type: string
                description: 文章源格式
                example: "# 标题/n <br>内容"
              status:
                enum: [PUBLISHED, WREDITINGITE, RECYCLE]
                type: number
                example: "PUBLISHED"
                description: "PUBLISHED 1 EDITING(2), RECYCLE(3), DELETE(4)"
              title:
                type: string
                description: 文章标题
                example: "标题"
      responses:
        200:
          description: 获得用户列表成功的返回值
          schema:
            type: object
            properties:
              content:
                type: object
                properties:
                  message:
                    type: string
                    example: success

  /user/{userId}/article/{id}:
    get:
      tags:
        - user
      summary: "get article by userid and article id"
      description: get
      parameters:
        - name: userId
          description: userId
          in: path
          type: number
          required: true
        - name: id
          description: userId
          in: path
          type: number
          required: true
      responses:
        200:
          description: 获得用户列表成功的返回值
          schema:
            type: object
            properties:
              content:
                type: object
                properties:
                  message:
                    type: string
                    example: success
  /user{userId}/article/status:
    put:
      tags:
        - user
      summary: "change article status"
      description: "change article status"
      parameters:
        - name: userId
          description: userId
          in: path
          type: number
          required: true
      responses:
        200:
          description: 获得用户列表成功的返回值
          schema:
            type: object
            properties:
              content:
                type: object
                properties:
                  message:
                    type: string
                    example: success
  /user/login:
    post:
      tags:
        - user
      summary: "user login"
      description: "user login system"
      parameters:
        - name: userId
          description: userId
          in: query
          type: number
          required: true
      responses:
        200:
          description: 获得用户列表成功的返回值
          schema:
            type: object
            properties:
              content:
                type: object
                properties:
                  message:
                    type: string
                    example: success



# thymeleaf 相关 模板渲染界面

/index:
  get:
    tags:
      - user-template


/users/{userId}/home:
  parameters:
    - name: userId

definitions:
  Article:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
          - "placed"
          - "approved"
          - "delivered"
      complete:
        type: "boolean"
        default: false
  Sort:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      username:
        type: "string"
      nickname:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      status:
        type: "integer"
        format: "int32"
        description: "是否禁止评论"
      expire:
        type: string
        description: "是否禁止发布"
  UserVo:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
  Pet:
    type: "object"
    required:
      - "name"
      - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
          - "available"
          - "pending"
          - "sold"
  Response:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
